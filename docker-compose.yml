version: '3.3'

services:

  db:
    image: mysql:${DB_VERSION}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql:rw

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"

  server:
    build:
      context: backend
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
    image: dbook-server:${VERSION}
    restart: unless-stopped
    command: bash -c 'python checkdbconnection.py && ./startserver.sh'
#    deploy:
#      resources:
#        limits:
#          memory: 4096M
    environment:
      DEBUG: ${DEBUG}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ADMIN_NAME: ${ADMIN_NAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      NFT_STORAGE_ACCESS_TOKEN: ${NFT_STORAGE_ACCESS_TOKEN}
      RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
    ports:
      - "8000:8000"
    depends_on:
      - db
    links:
      - db
      - rabbitmq
      - redis
    volumes:
      - media_file:/code/media:rw
      - static_file:/code/static:rw
      - enc_file:/code/file:rw  # encryption keys
      - ./logs/:/code/logs/:rw

  nginx:
    build:
      context: nginx
      args:
        NGINX_VERSION: ${NGINX_VERSION}
        NGINX_CONFIG_TYPE: ${NGINX_CONFIG_TYPE}
    image: dbook-nginx:${VERSION}
    restart: unless-stopped
    volumes:
      - static_file:/uploads/static
      - media_file:/uploads/media
      - enc_file:/uploads/file
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    links:
      - server

  redis:
    build:
      context: redis
      args:
        REDIS_VERSION: ${REDIS_VERSION}
    image: dbook-redis:${VERSION}
    restart: unless-stopped
    ports:
      - "6379:6379"
    privileged: true
    command: sh -c "./start.sh"
    volumes:
      - redis_data:/data

  rabbitmq:
    build:
      context: rabbitmq
      args:
        RABBITMQ_VERSION: ${RABBITMQ_VERSION}
    image: dbook-rabbitmq:${VERSION}
    restart: unless-stopped
    environment:
      - RABBITMQ_CONFIG_FILE=/rabbit/rabbitmq.conf
    ports:
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia

  celery:
    build:
      context: fileservice
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}
    image: dbook-file-service:${VERSION}
    restart: unless-stopped
    command: celery -A tasks.main worker --loglevel=INFO
    environment:
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_DEFAULT_VHOST}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - NFT_STORAGE_ACCESS_TOKEN=${NFT_STORAGE_ACCESS_TOKEN}
    volumes:
      - media_file:/code/media
      - enc_file:/code/file  # encryption keys
    depends_on:
      - rabbitmq
      - redis
    links:
      - rabbitmq
      - redis

volumes:
  db_data: { }
  media_file: { }
  static_file: { }
  redis_data: {}
  rabbitmq_data: {}
  enc_file: {}

